package myteam;

import java.awt.Color;
import java.util.ArrayList;

import edu.warbot.agents.MovableWarAgent;
import edu.warbot.agents.WarResource;
import edu.warbot.agents.agents.WarExplorer;
import edu.warbot.agents.enums.WarAgentType;
import edu.warbot.agents.percepts.WarAgentPercept;
import edu.warbot.agents.resources.WarFood;
import edu.warbot.brains.WarBrain;
import edu.warbot.brains.brains.WarExplorerBrain;
import edu.warbot.communications.WarMessage;


/*
 * Notes : 
 * 
 * Il faut s'inscrire avant
 * Le jar doit avoir le même nom que l'équipe
 * Un max de commentaire BIEN ECRITS ET UTILES
 * A rendre : sources + jar
 * 
 * Comportements à implémenter :
 * - Récupérer liste de bases ennemies
 * - Explorateur esquive tous les agents ennemis autres que explorateur
 * - 
 * 
 */

@SuppressWarnings("unused")
public abstract class WarExplorerBrainController extends WarExplorerBrain  {
	
	WTask ctask;
	static EnumWarExplorer behaviour = EnumWarExplorer.pacific;
	
	static WTask handleMsgs = new WTask(){ 
		String exec(WarBrain bc){
			return "";
		}
	};
	

	public WarExplorerBrainController() {
		super();
		ctask = pacificTask; // initialisation de la FSM
	}

	@Override
	public String action() {
		String toReturn = ctask.exec(this);   // le run de la FSM
		if(toReturn == null){
			if (isBlocked())
				setRandomHeading();
			return WarExplorer.ACTION_MOVE;
		} else {
			return toReturn;
		}
	}
	
	// pacificTask => [ searchFood, returnFood, searchBase ]
	static WTask pacificTask = new WTask(){
		String exec(WarBrain bc){
			WarExplorerBrainController me = (WarExplorerBrainController) bc;
			if(behaviour == EnumWarExplorer.pacific) {
				me.ctask = getFoodTask;
			}
			return(null);
		}
	};
	

	static WTask returnFoodTask = new WTask(){
		String exec(WarBrain bc){
			WarExplorerBrainController me = (WarExplorerBrainController) bc;
			if(me.isBagEmpty()){
				me.setHeading(me.getHeading() + 180);

				me.ctask = getFoodTask;
				return(null);
			}
			me.setDebugStringColor(Color.green.darker());
			me.setDebugString("Returning Food");

			if(me.isBlocked())
				me.setRandomHeading();

			ArrayList<WarAgentPercept> basePercepts = (ArrayList<WarAgentPercept>) me.getPerceptsAlliesByType(WarAgentType.WarBase);

			//Si je ne vois pas de base
			if(basePercepts == null | basePercepts.size() == 0){

				WarMessage m = me.getMessageFromBase();
				//Si j'ai un message de la base je vais vers elle
				if(m != null)
				{
					me.setDebugString("direction vers la base");
					me.setHeading(m.getAngle());
				}

				//j'envoie un message aux bases pour savoir ou elles sont..
				me.setDebugString("Where are you?");
				me.broadcastMessageToAgentType(WarAgentType.WarBase, "Where are you?", "");

				return(MovableWarAgent.ACTION_MOVE);

			}else{//si je vois une base
				WarAgentPercept base = basePercepts.get(0);

				if(base.getDistance() > MovableWarAgent.MAX_DISTANCE_GIVE){
					me.setHeading(base.getAngle());
					return(MovableWarAgent.ACTION_MOVE);
				}
				else{
					me.setIdNextAgentToGive(base.getID());
					return(MovableWarAgent.ACTION_GIVE);
				}

			}

		}
	};

	static WTask getFoodTask = new WTask(){
		String exec(WarBrain bc){
			WarExplorerBrainController me = (WarExplorerBrainController) bc;
			if(me.isBagFull()){

				me.ctask = returnFoodTask;
				return(null);
			}

			if(me.isBlocked())
				me.setRandomHeading();

			me.setDebugStringColor(Color.BLACK);
			me.setDebugString("Searching foooood");


			ArrayList<WarAgentPercept> percepts = (ArrayList<WarAgentPercept>) me.getPercepts();

			for ( WarAgentPercept agtPcpt : percepts)
			{
				switch(agtPcpt.getType()) {
				case WarFood:
					if(!me.isBagFull())
					{
						me.setDebugString("MAIM");
						me.setHeading(agtPcpt.getAngle());
						if(agtPcpt.getDistance()<WarFood.MAX_DISTANCE_TAKE)	
							return WarExplorer.ACTION_TAKE;
						else
							return WarExplorer.ACTION_MOVE;
					}
				default:
					break;
				}
			}

			return WarExplorer.ACTION_MOVE;
		}

	};


	private WarMessage getMessageAboutFood() {
		for (WarMessage m : getMessages()) {
			if(m.getMessage().equals("foodHere"))
				return m;
		}
		return null;
	}

	private WarMessage getMessageFromBase() {
		for (WarMessage m : getMessages()) {
			if(m.getSenderType().equals(WarAgentType.WarBase))
				return m;
		}

		broadcastMessageToAgentType(WarAgentType.WarBase, "Where are you?", "");
		return null;
	}


	
/*
    @Override
    public String action() {
    	ArrayList<WarAgentPercept> percepts = (ArrayList<WarAgentPercept>) getPercepts();
    	for ( WarAgentPercept agtPcpt : percepts)
    	{
    		switch(agtPcpt.getType()) {
    			case WarFood:
    				if(!this.isBagFull())
    				{
    					setDebugString("MAIM");
    					setHeading(agtPcpt.getAngle());
    					if(agtPcpt.getDistance()<WarFood.MAX_DISTANCE_TAKE)	
    						return take();
    				}
			default:
				break;
    		}
    	}
		if (this.isBagFull()) // retour � la base si le sac est plein
		{
			setDebugString("Bag full : je cherche ma maison");
			percepts = null;
			percepts = (ArrayList<WarAgentPercept>) getPerceptsAlliesByType(WarAgentType.WarBase);
			WarAgentPercept base = null;

			if((percepts.size()==0) || (percepts==null)) // on ne trouve pas la base
			{
				this.broadcastMessageToAgentType(WarAgentType.WarBase, "whereAreYou", ""); // on demande o� elle se trouve

				ArrayList<WarMessage> wm = (ArrayList<WarMessage>) this.getMessages();
				for (WarMessage m : wm)
				{
					if(m.getSenderType() == WarAgentType.WarBase)
					{
						setDebugString("OMG ma base! J'ARRIVE !");
						setHeading(m.getAngle());
					}
				}
			}
			else  // on a trouv� la base
			{
				base = percepts.get(0);
				if(base.getDistance() > WarBrain.MAX_DISTANCE_GIVE)
				{
					setDebugString("La base est dans mon rayon de perception... ");
	                setHeading(base.getAngle());
	                return WarExplorer.ACTION_MOVE;
				}
	            else {
	            	setDebugString("Et bim! Don de nourriture à la base");
	            	setIdNextAgentToGive(base.getID());  
	            	return WarExplorer.ACTION_GIVE;
	            }	            	
			}
		}
		else if (!this.isBagFull())
			setDebugString("Cherche miam (:");

    	if (isBlocked()) // Obstacle imprévu
    		setRandomHeading();

    	 for (WarAgentPercept w : getPerceptsEnemies()) 
    	 {
    		 if (w.getType().equals(WarAgentType.WarBase))
    				 {
    			 		this.broadcastMessageToAgentType(WarAgentType.WarLight, "goThere",
    					 				String.valueOf(wp.getDistance()), String.valueOf(wp.getAngle()));setDebugString("Angle cible : "+w.getAngle());
    			 		return WarExplorer.ACTION_IDLE;
    				 }
    		 if (w.getType().equals(WarAgentType.WarTurret))
			 {
		 		this.broadcastMessageToAgentType(WarAgentType.WarLight, "goThere",
    					 				String.valueOf(wp.getDistance()), String.valueOf(wp.getAngle()));setDebugString("Angle cible : "+w.getAngle());
		 		setHeading(180);
		 		return WarExplorer.ACTION_MOVE;
			 }
    	 }

    		// Ici faire le détour de l'ennemi en arc de cercle
//    		if (w.getType().equals(WarAgentType.WarLight))
//    		{
//    			;
//    		}

        return WarExplorer.ACTION_MOVE;
    }
	 */
}
